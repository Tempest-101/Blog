<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Tempest-101.github.io</id>
    <title>守财奴囤小宇</title>
    <updated>2023-06-11T14:49:55.414Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Tempest-101.github.io"/>
    <link rel="self" href="https://Tempest-101.github.io/atom.xml"/>
    <subtitle>Time</subtitle>
    <logo>https://Tempest-101.github.io/images/avatar.png</logo>
    <icon>https://Tempest-101.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 守财奴囤小宇</rights>
    <entry>
        <title type="html"><![CDATA[MySQL锁]]></title>
        <id>https://Tempest-101.github.io/post/mysql-suo/</id>
        <link href="https://Tempest-101.github.io/post/mysql-suo/">
        </link>
        <updated>2023-04-23T08:49:00.000Z</updated>
        <content type="html"><![CDATA[<h4 id="mysql中有哪些锁">MySQL中有哪些锁</h4>
<h5 id="乐观锁与悲观锁">乐观锁与悲观锁</h5>
<p>乐观锁指认为每次对数据库的操作都没有并发问题，在对数据操作完后再判断操作过程中有没有出现并发问题，通过CAS实现，可能会有ABA问题(对判断值修改一次后又修改回期望值，虽然CAS判断没有出现并发问题，但是实际上出现了)，这点通过添加数据行版本值解决。</p>
<p>悲观锁则认为每次对数据库的操作都会有并发问题，于是在每次操作前都要加锁，性能较差。</p>
<p>在写操作多时，出现并发问题的可能性较大，采用悲观锁。反之采用乐观锁。</p>
<h5 id="共享锁与互斥锁">共享锁与互斥锁</h5>
<p>共享锁，或者说读锁，读读之间没有并发问题，所以共享锁兼容，共享锁与互斥锁排斥。(……LOCK IN SHARE MODE)</p>
<p>互斥锁，或者说写锁，写写之间存在并发问题，互斥锁互斥，互斥锁与共享锁排斥。(……FOR UPDATE)</p>
<h5 id="全局锁-表锁-行锁">全局锁、表锁、行锁</h5>
<p>这三个锁是颗粒度不同，要注意的是行锁锁的是索引，走二级索引不光会锁这个二级索引，也会锁回表得到的主键索引。</p>
<h5 id="mdl锁">MDL锁</h5>
<p>MDL锁不需要显式去加，在对表操作时会自动给这个表加，对表做crud操作时加MDL读锁，对表结构进行修改时加MDL写锁，MDL锁的目的是防止在crud时这个表结构发生变化。MDL锁在事务结束时才释放。</p>
<p>那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），那在对表结构做变更操作的时候，可能会发生意想不到的事情，比如下面这个顺序的场景：</p>
<ol>
<li>首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；</li>
<li>然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；</li>
<li>接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，</li>
</ol>
<p>那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。</p>
<blockquote>
<p>为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？</p>
</blockquote>
<p>这是因为申请 MDL 锁的操作会形成一个队列，队列中<strong>写锁获取优先级高于读锁</strong>，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。</p>
<p>所以为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑 kill 掉这个长事务，然后再做表结构的变更。</p>
<h5 id="记录锁-间隙锁-next-key-lock">记录锁、间隙锁、NEXT-KEY LOCK</h5>
<p>记录锁锁的是一条记录，间隙锁只存在可重复读隔离级别，锁的是一个范围，记录锁与间隙锁共同构成临键锁，为的是解决可重复读隔离级别下的幻读问题。</p>
<p>间隙锁互相兼容。间隙锁加在两个索引之间。</p>
<h5 id="意向锁">意向锁</h5>
<p>意向锁是表级锁。如果一个事务要给表加锁，要先判断这个表有没有被其他事务加锁，然后判断表中的记录有没有被其他事务加锁，第二个环节如果直接判断的话只能一个个遍历记录来看有没有加锁，这性能很差，为此在给一条记录加锁前给这个表加一个意向锁，这样就不需要遍历记录了。</p>
<h5 id="插入意向锁">插入意向锁</h5>
<p>在插入一条数据时，需要判断插入位置是否已被其他事务加了间隙锁，如果加了，那插入操作就需要等待这个间隙锁被释放。为了表示想要在这个位置插入数据，但在等待间隙锁释放，这个锁就叫插入意向锁。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[事务及四特性]]></title>
        <id>https://Tempest-101.github.io/post/shi-wu-ji-si-te-xing/</id>
        <link href="https://Tempest-101.github.io/post/shi-wu-ji-si-te-xing/">
        </link>
        <updated>2023-04-23T08:47:07.000Z</updated>
        <content type="html"><![CDATA[<h4 id="事务是什么">事务是什么？</h4>
<p>一条sql语句就是一次行动，一些sql语句在逻辑上关联，将这些sql语句聚合成一件事，即将多次动作聚合成一个行动，就是事务。事务中的sql语句需要都成功执行，如果有任何错误的话就全部撤销。</p>
<p>事务满足四个特性：原子性、隔离性、一致性、持久性。一致性是目的，其他三个特性是手段。</p>
<p>MySQL有四种隔离级别：读未提交、读提交、可重复读、串行化。</p>
<h4 id="原子性如何实现">原子性如何实现？</h4>
<p>原子性指一个事务中的sql语句如同一个原子一般，要么全部成功，要么全部失败，不会有不同的状态。</p>
<p>原子性实现的关键在于实现将sql操作撤回这一功能。MySQL采用InnoDB的undo log实现。</p>
<p>undo log是一个逻辑日志，它记录着数据更新前的记录，RowID，事务ID，回滚指针(可以理解为回退sql操作需要的信息)，当事务需要回滚时，MySQL就依靠undo log的信息进行回退。</p>
<h4 id="持久性如何实现">持久性如何实现？</h4>
<p>为了减少IO次数，提高性能，InnoDB提供了一个在内存的Buffer Pool，对数据的操作会先存在Buffer Pool，在某个时刻再将Buffer Pool中的数据存入磁盘。但单单这样的话，如果在Buffer Pool还未刷脏时数据库就宕机了，那么重启后Buffer Pool中的数据就丢失了，未能落到磁盘。而持久性就是指一个事务提交后，最终这个事务对数据的修改一定能落到磁盘。MySQL的策略是，保证在事务成功后，这个事务对数据库的修改在磁盘中都有一个总的记录，这样哪怕内存中的数据丢失了，仍可以通过磁盘中这一记录落盘。这个记录由redo log实现。</p>
<p>redo log是一种物理日志，记录的是数据的改变。在sql语句对数据的修改记录到Buffer Pool时，redo log也会记录这次改变。如同Buffer log产生的原因，redo log也有对应的redo log buffer，redo log buffer又分为若干个redo log block，每个block大小为512字节，这是一个扇区的大小，扇区是最小写入单位。在事务提交时，需要将redo log buffer刷入磁盘。只有redo log完成持久化了，这个事务才算成功。而这时就算数据库宕机了，但是redo log已经记录在磁盘了，最终修改的数据依旧会落到磁盘。这也就是先写日志后写数据。</p>
<p>PS：</p>
<p><strong>为什么要redo log，直接刷脏不行吗？</strong></p>
<p>刷脏需要定位各个数据行的位置，磁头要多次移动，而redo log是顺序IO，速度会快很多。</p>
<p>刷脏是以数据页为单位的，会涉及很多无用数据的写入，redo log则只包含被修改的数据部分，相比之下小很多。</p>
<p>也有其他方法可以实现持久化，但是代价比redo log大。</p>
<p>有一个参数可以控制每次事务提交是否要求redo log buffer持久化，如果设置为否，那么MySQL不再具有持久性特性。</p>
<p>redo log靠两阶段提交保证自身完整性与和bin log的一致性。</p>
<p>恢复过程</p>
<ul>
<li>启动InnoDB时，找到最近一次Checkpoint的位置，利用Checkpoint LSN去找大于该LSN的redo log进行日志恢复。</li>
<li>如果中间恢复失败了也没影响，再次恢复的时候还是从上次保存成功的Checkpoint的位置继续恢复。</li>
</ul>
<p><strong>什么是LSN?</strong></p>
<p>LSN也就是log sequence number，也日志的序列号，是一个单调递增的64位无符号整数。redo log和数据页都保存着LSN，可以用作数据恢复的依据。LSN更大的表示所引用的日志记录所描述的变化发生在更后面。</p>
<p><strong>什么是Checkpoint？</strong></p>
<p>Checkpoint表示一个保存点，在这个点之前的数据页的修改（log LSN&lt;Checkpoint LSN）都已经写入磁盘文件了。InnoDB每次刷盘之后都会记录Checkpoint，把最新的redo log LSN 记录到Checkpoint LSN 里，方便恢复数据的时候作为起始点的判断。</p>
<h4 id="隔离性如何实现">隔离性如何实现？</h4>
<p>事务有四种隔离级别</p>
<p>读未提交：读到表中最新的值，写操作加锁，无法应对脏读、不可重复读、幻读</p>
<p>读提交：只能读到commit后的值，通过MVCC、加锁实现，解决了脏读</p>
<p>可重复读：只能读事务开启时那一瞬间的数据，通过MVCC、加锁实现，解决了脏读与不可重复读，幻读需要显示加锁才能解决。</p>
<p>串行化：将事务变成顺序执行，相当于转变为单线程，通过加锁实现，解决了三种问题。</p>
<h5 id="读未提交">读未提交</h5>
<p>读操作不加锁，写操作加互斥锁防止脏写。(不加锁的语句不会被锁阻塞！)</p>
<p>脏写例子：有一条数据为0，事务A将其改为1，事务B改为2，而事务A回滚，导致最终这个值还是0，对于事务B却认为该数据应该是2。通过加互斥锁，事务B必须等事务A释放锁后事务B才能对表进行更新。</p>
<h5 id="读提交">读提交</h5>
<p>读操作是快照读，依靠MVCC，会在可重复读讲解。写依旧要互斥锁。</p>
<h5 id="可重复读">可重复读</h5>
<p>与读提交一样，MVCC解决不可重复读，显示加锁+next-key解决幻读。重点要讲一下MVCC。</p>
<h5 id="mvcc">MVCC</h5>
<p>MVCC让数据库中的数据有多个版本，这些版本通过undo log实现联结。每个事务都有一个transcation_id，在这个事务内修改更新的数据行都会生成一个transcation_id与这个事务一样的数据行版本。对于可重复读级别，事务开启时会生成一个由当前活动的事务的事务id组成的数组，这个数组的最小值称为低水位，最大值+1称为高水位，这个数组姑且称为水位图。在读数据时会将该数据的版本号和这个数组相比，如果版本号小于等于低水位，则认为可读；如果大于等于高水位，则认为不可读，然后通过undo log查询上一个版本继续比较；如果版本号在水位之间，则看数组中有没有这个版本号，有的话认为不可读且继续比较上一个版本，没有的话就认为可读。</p>
<p>读提交读的区别是，可重复读的水位图在事务开启时就确定下，在事务结束前不会改变。而读提交则是事务中每执行一条sql语句前都会更新一次水位图。</p>
<h5 id="next-key">next-key</h5>
<p>next-key由行锁+间隙锁组合而成，<em><strong>TODO</strong></em><em><strong>TODO</strong></em><em><strong>TODO</strong></em><em><strong>TODO</strong></em><em><strong>TODO</strong></em><em><strong>TODO</strong></em><em><strong>TODO</strong></em></p>
<h5 id="串行化">串行化</h5>
<p>读操作加共享锁，写操作加互斥锁，性能较差，很少使用。</p>
<h4 id="两阶段提交">两阶段提交</h4>
<p>两阶段提交指的是redo log持久化分为两阶段实现，目的是保证redo log与bin log的逻辑一致性。</p>
<p>为何有了bin log还要redo log？bin log是追加写，文件无限大小；redo log是循环写，只记录脏页数据相关。bin log是全量备份，但是没有一个标志让InnoDB判断哪些数据已经刷盘，哪些还未刷盘，所以宕机后无法通过bin log定位需要从哪个地方开始恢复。所以bin log是没有crash-safe能力的。</p>
<p>两阶段提交：在对数据进行操作后，首先写一次redo log，并标记为prepared，然后写bin log，最后再将redo log标记为committed，至此两阶段提交完毕。</p>
<p>两阶段提交如何实现崩溃恢复呢？</p>
<p>redo log与bin log在记录时都会记录一个XID，是事务ID。</p>
<p>若在第一次redo log提交前宕机，redo log与bin log都未改变，还是逻辑一致的，不需要恢复。</p>
<p>若是在第一次redo log提交至bin log提交之间宕机的话，redo log未标记为committed，会用redo log的XID去bin log中查找，而bin log此时并未写入，自然是无法查找到的，那么执行回滚操作。</p>
<p>若是在bin log提交至redo log第二次提交之间宕机，依旧是用redo log的XID去bin log中查找，此时能查找到，数据是逻辑一致的，那么完成最后一步将redo log状态改为committed。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL自增主键原理]]></title>
        <id>https://Tempest-101.github.io/post/mysql-zi-zeng-zhu-jian-yuan-li/</id>
        <link href="https://Tempest-101.github.io/post/mysql-zi-zeng-zhu-jian-yuan-li/">
        </link>
        <updated>2023-04-23T08:45:24.000Z</updated>
        <content type="html"><![CDATA[<p>自增主键会出现不连续的问题，在更早的版本前还有不单调的问题，要了解这些问题产生的原因需要先了解下自增主键的原理。</p>
<p>在表中会有一个AUTO_INCREMENT，它的值是下一条数据的自增值，该数据在MyISAM存储引擎保存在数据文件中，在InnoDB存储引擎保存在内存中。针对InnoDB来了解。</p>
<p>在MySQL8.0版本前，AUTO_INCREMENT没有持久化功能，因此在MySQL重启后，AUTO_INCREMENT是没有重启前的值的，因此它会查询当前表中最大的子增值max，再将max+1设为AUTO_INCREMENT的值。如果当前表最大值是10，其次是9，那么AUTO_INCREMENT就是11，而此时把10这条数据删除，AUTO_INCREMENT仍旧是11；但重启后，MySQL查询到max为9，那么AUTO_INCREMENT就会变成10。将这就是导致不单调的原因。</p>
<p>在MySQL8.0级以后，自增值的变更会保存在redo log中，重启时会利用redo log恢复之前的值。</p>
<p>下面我们来了解下自增值修改策略。如果一个字段id被定义为AUTO_INCREMENT，在插入一行数据时：</p>
<ul>
<li>如果插入数据行id为0、null或未指定，就将当前AUTO_INCREMENT的值填入该字段。</li>
<li>如果插入数据行指定了id，则直接用指定值。</li>
</ul>
<p>根据插入值id与AUTO_INCREMENT的关系，AUTO_INCREMENT的修改策略也会不同。假设最终插入id的值为X，当前AUTO_INCREMENT为Y：</p>
<ul>
<li>X&gt;=Y，AUTO_INCREMENT重新计算</li>
<li>X&lt;Y，AUTO_INCREMENT不变</li>
</ul>
<p>AUTO_INCREMENT计算算法：从auto_increment_offset开始以auto_increment_increment为步长逐步叠加直到计算出第一个大于X的值，更新该值为AUTO_INCREMENT。auto_increment_offset与auto_increment_increment为系统参数，默认为1。</p>
<p>现在可以来了解自增主键不连续的问题了。该现象可能由<strong>唯一键冲突、回滚、批量插入</strong>导致。</p>
<h5 id="唯一键冲突">唯一键冲突</h5>
<p>假设表table结构为id、a、b。id为自增主键，a为唯一索引，b为普通数据。表中已有一条数据为：(1，1，1)，那么此时AUTO_INCREMENT应为2，这时执行</p>
<pre><code class="language-mysql">insert into table value (null, 1 , 2)
</code></pre>
<p>底层流程为：</p>
<ol>
<li>执行器调用引擎接口写入(null,1,2)</li>
<li>存储引擎发现传入id为null，获取当前表AUTO_INCREMENT为2，将传入值修改为(2,1,2)</li>
<li>将AUTO_INCREMENT改为3</li>
<li>继续执行写入操作，发现唯一索引a冲突，返回Duplicate key error错误</li>
</ol>
<p>因为唯一主键冲突，该数据并没有写入成功，但是AUTO_INCREMENT却已经更改为3，这就造成了自增主键不连续。</p>
<h5 id="回滚">回滚</h5>
<pre><code class="language-mysql">insert into table values(null,1,1);
begin;
insert into table values(null,2,2);
rollback;
insert into table values(null,2,2);
//插入的行是(3,2,2)
</code></pre>
<p>造成该问题的原因是事务回滚后AUTO_INCREMENT并没有回退。这是为了性能考虑的。我们来看看允许回退的情况：</p>
<p>假设有两个事务并行</p>
<ol>
<li>假设事务 A 申请到了 id=2， 事务 B 申请到 id=3，那么这时候表 t 的自增值是 4，之后继续执行。</li>
<li>事务 B 正确提交了，但事务 A 出现了唯一键冲突。</li>
<li>如果允许事务 A 把自增 id 回退，也就是把表 t 的当前自增值改回 2，那么就会出现这样的情况：表里面已经有 id=3 的行，而当前的自增 id 值是 2。</li>
<li>接下来，继续执行的其他事务就会申请到 id=2，然后再申请到 id=3。这时，就会出现插入语句报错“主键冲突”。</li>
</ol>
<p>而为了解决这个主键冲突，有两种方法：</p>
<ol>
<li>每次申请 id 之前，先判断表里面是否已经存在这个 id。如果存在，就跳过这个 id。但是，这个方法的成本很高。因为，本来申请 id 是一个很快的操作，现在还要再去主键索引树上判断 id 是否存在。</li>
<li>把自增 id 的锁范围扩大，必须等到一个事务执行完成并提交，下一个事务才能再申请自增 id。这个方法的问题，就是锁的粒度太大，系统并发能力大大下降。</li>
</ol>
<p>这两个方法都会较大的影响性能，权衡之下还是选择了用空间换时间，允许不连续来换取性能。</p>
<h5 id="批量插入">批量插入</h5>
<p>这里的批量插入特指<strong>包含的语句类型是 insert … select、replace … select 和 load data 语句</strong>。因为如果是用values这种的话，在申请自增主键时是可以精确计算出需要申请的个数的。而特指的那几种是未知的，在申请时会先分配1个，若不够则再分配2个、4个、8个。下面有个例子：</p>
<pre><code class="language-mysql">insert into t values(null, 1,1);
insert into t values(null, 2,2);
insert into t values(null, 3,3);
insert into t values(null, 4,4);
create table t2 like t;
insert into t2(c,d) select c,d from t;
insert into t2 values(null, 5,5);
</code></pre>
<p>insert…select，实际上往表 t2 中插入了 4 行数据。但是，这四行数据是分三次申请的自增 id，第一次申请到了 id=1，第二次被分配了 id=2 和 id=3， 第三次被分配到 id=4 到 id=7。</p>
<p>由于这条语句实际只用上了 4 个 id，所以 id=5 到 id=7 就被浪费掉了。之后，再执行 insert into t2 values(null, 5,5)，实际上插入的数据就是（8,5,5)。</p>
<h5 id="自增锁的优化">自增锁的优化</h5>
<p>可以看到，自增 id 锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。其实，在 MySQL 5.1 版本之前，并不是这样的。</p>
<p>接下来，我会先给你介绍下自增锁设计的历史，这样有助于你分析接下来的一个问题。</p>
<p>在 MySQL 5.0 版本的时候，自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。显然，这样设计会影响并发度。</p>
<p>MySQL 5.1.22 版本引入了一个新策略，新增参数 innodb_autoinc_lock_mode，默认值是 1。</p>
<ol>
<li>这个参数的值被设置为 0 时，表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；</li>
<li>这个参数的值被设置为 1 时：</li>
</ol>
<ul>
<li>普通 insert 语句，自增锁在申请之后就马上释放；</li>
<li>类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li>
</ul>
<ol start="3">
<li>这个参数的值被设置为 2 时，所有的申请自增主键的动作都是申请后就释放锁。</li>
</ol>
<p>为什么批量插入语句还需要加语句锁呢？因为如果设置binlog_format=statement的话，那么在一个事务A执行批量插入的过程中，另一个事务B向同一个表也插入一行数据，那么批量插入的那些数据的自增主键就不连续了。而此时bin log记录的要么先A再B，要么先B再A，无论哪种，用bin log回档时，都会造成数据不一致。有两种解决方案：</p>
<ol>
<li>一种思路是，让原库的批量插入数据语句，固定生成连续的 id 值。所以，自增锁直到语句执行结束才释放，就是为了达到这个目的。</li>
<li>另一种思路是，在 binlog 里面把插入数据的操作都如实记录进来，到备库执行的时候，不再依赖于自增主键去生成。这种情况，其实就是 innodb_autoinc_lock_mode 设置为 2，同时 binlog_format 设置为 row(该参数下，bin log记录的是真正的数据改变顺序)。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[索引是什么？]]></title>
        <id>https://Tempest-101.github.io/post/suo-yin-shi-shi-me/</id>
        <link href="https://Tempest-101.github.io/post/suo-yin-shi-shi-me/">
        </link>
        <updated>2023-04-05T13:31:32.000Z</updated>
        <content type="html"><![CDATA[<h4 id="什么是索引">什么是索引？</h4>
<p>索引可以认为是为了提高数据库查找性能而维护的一个数据结构。</p>
<p>数据库的查找操作，无非就是根据一张表的若干个字段去查询对应的数据行。在最原始的数据库中，如果要进行一次查询，那么只能从表的第一行开始挨个遍历到最后一行，在遍历过程中比较当前数据行是否满足查询条件，若满足则加入结果集。这样每次查询都要遍历整个表，效率极差。</p>
<p>由于查询过程中要比较的只是表中的若干个字段，也就是说查询过程中对于定位操作起作用的只有那几个字段，那么我们将这些字段下的数据生成副本，用搜索性能好的数据结构进行存储，同时对每个数据节点附加一个可以获取该数据所在数据行信息的能力。这个能力可以是指针，也就是非聚簇索引；也可以是直接把数据行保存在这个数据节点中，也就是聚簇索引。这样查询操作只需要根据查询条件访问这个搜索性能好的数据结构实例，获取数据节点，然后由该数据节点获取对应数据行信息即可。</p>
<p>这里的数据结构实例就是索引。</p>
<h4 id="mysql索引的底层实现为什么mysql索引要用b树实现而不是b树-红黑树-map-list">MySQL索引的底层实现(为什么MySQL索引要用B+树实现，而不是B树、红黑树、Map、List)</h4>
<p>索引数据结构的选择并非完全是由该数据结构的搜索效率决定的，因为MySQL数据库对数据的访问一般要经过磁盘IO，而磁盘IO的性能要远远劣于内存操作。除此之外还有其他因素。因此索引结构的选择并没有那么简单。</p>
<p>InnoDB采用B+树实现索引。直接讲用B+树实现的好处并不直观，我们先看下其他数据结构相比B+树的问题。</p>
<h5 id="红黑树">红黑树</h5>
<p>红黑树的搜索、维护性能都是很好的，单从这方面考虑红黑树其实比B+树优秀，因为B+树维护开销大。但是红黑树结构每一次对子节点的访问都是一次磁盘IO操作，也就是说磁盘IO的次数与红黑树访问深度直接挂钩，而红黑树是一种二叉树，高度很高，一次查询很可能伴随着非常多次的磁盘IO，所以综合考虑下红黑树是不适合作InnoDB的索引的。</p>
<h5 id="hashmap">HashMap</h5>
<p>和红黑树一样，磁盘IO的考虑。但Memory数据库是内存数据库，用到了该结构。</p>
<h5 id="list">List</h5>
<p>内存空间是有限的，如果数据少那List是很优秀的，但是当数据多起来，List将无法一次性读入内存。那就与不加索引一样了。</p>
<h5 id="b树">B树</h5>
<p>B树是MyISAM数据库索引的实现方式，采用非聚簇索引的方式存储数据，多路搜索树的结构使其很好的平衡了搜索性能与磁盘IO次数，是一种很不错的索引存储结构。但在一些方面上还是不如B+树。</p>
<h5 id="b树-2">B+树</h5>
<p>B+树与B树的不同在于B+树非叶子节点只存储key，而叶子节点除了key还存储了数据行，采用的是聚簇索引，且叶子节点有双向链表。非叶子节点只存key，所以一个磁盘页可以存放更多的节点，因此B+树的高度比B树更低，最差磁盘IO次数比B树要少。由于是聚簇索引，叶子节点直接存储了数据行，所以当数据行位置发生改变时并不需要再维护索引。双向链表使索引的范围查询也同样高效。</p>
<p>主键索引的叶子节点存储数据行，其他索引则存储的是主键值。调用其他索引时是先查询到这个索引对应的主键，再通过主键查询数据行。这一返回主键的操作叫回表。InnoDB有一个小优化，当在一段时间内有一个辅助索引经常被访问时，InnoDB会在内存创建一个Hash表描述这个辅助索引以提升回表性能。</p>
<p>B+树也是有缺陷的，它的维护成本较高。增删数据可能会导致B+树的分裂与聚合，这是很耗时的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java线程的生命周期(状态转换)]]></title>
        <id>https://Tempest-101.github.io/post/java-xian-cheng-de-sheng-ming-zhou-qi-zhuang-tai-zhuan-huan/</id>
        <link href="https://Tempest-101.github.io/post/java-xian-cheng-de-sheng-ming-zhou-qi-zhuang-tai-zhuan-huan/">
        </link>
        <updated>2023-03-31T12:13:06.000Z</updated>
        <content type="html"><![CDATA[<p>学习Java线程生命周期，其实就是掌握Java线程各个状态间的转换。在学习Java线程生命周期前，先来看一下通用线程生命周期。</p>
<h3 id="通用的线程生命周期">通用的线程生命周期</h3>
<p>通用的线程生命周期一般包含五个状态：初始状态、可运行状态、运行状态、休眠状态、终止状态。<br>
<img src="https://Tempest-101.github.io/post-images/1680341777469.png" alt="" loading="lazy"><br>
<strong>初始状态</strong>：指线程在语言层面被创建了，但操作系统层面上并未创建。也就是说，初始状态的线程不允许分配CPU资源。</p>
<p><strong>可运行状态</strong>：操作系统层面上线程成功创建即为可运行状态线程，表现为拥有获取CPU资源的资格。</p>
<p><strong>运行状态</strong>：一个线程获取了操作系统分配的CPU资源后就会转为运行状态。</p>
<p><strong>休眠状态</strong>：当运行状态的线程调用了一个阻塞的API(例如以阻塞方式读文件)或等待某个事件时，该线程会释放CPU使用权。这时该线程就处于休眠状态，当等待事件发生后线程就会再转为可运行状态。</p>
<p><strong>终止状态</strong>：线程执行完或遇到异常就会转换为终止状态，终止状态标志着线程的死亡。</p>
<p>在Java语言中，可运行状态与运行状态是合并的，因为这两个状态是面向操作系统的，JVM并不关心线程调度，而是把线程调度交给操作系统处理。除此之外，Java语言还细化了休眠状态应对更多情况。</p>
<h3 id="java线程生命周期">Java线程生命周期</h3>
<p>Java线程生命周期大致可以简化为下图：<br>
<img src="https://Tempest-101.github.io/post-images/1680342875176.png" alt="" loading="lazy"><br>
Java线程生命周期分为四个状态，其中休眠状态又细分为三个状态，因此可以认为是六个状态：</p>
<p><strong>NEW</strong>：Java中使用线程需要先创建线程对象(继承Thread或实现Runnable，并创建实例)，这个线程对象刚被创建好时就处于NEW状态。</p>
<p><strong>RUNNABLE</strong>：NEW状态的线程是不会被操作系统调度的，也就是NEW状态线程并不会执行。调用线程对象的start()方法JVM就会将该线程交给操作系统调度，这时线程就转化到了RUNNABLE状态。</p>
<p><strong>BLOCKED</strong>：线程等待synchronized隐式锁时会从RUNNABLE态转化为BLOCKED态，在synchronized隐式锁被该线程获取后，该线程又会从BLOCKED态转化为RUNNABLE态。值得注意的是，调用阻塞API并不会改变Java线程生命周期状态，因为阻塞API造成的阻塞是面向操作系统的，JVM并不关心系统调用的相关状态，因此在JVM看来，因为调用阻塞API造成休眠的线程还是RUNNABLE状态。</p>
<p><strong>WAITING</strong>：有三种情况会使RUNNABLE态线程转化为WAITING线程：<br>
1.获取了synchronized隐式锁的线程调用了无参的Object.wait()方法。<br>
2.线程中调用了无参的join()方法让其他线程“插队”，在这个插队线程执行完之前本线程处于WAITING状态。<br>
3.调用LockSupport.park()</p>
<p><strong>TIMED_WAITING</strong>：有五种情况会使RUNNABLE线程转化为TIMED_WAITING线程：<br>
1.调用带超时参数的 Thread.sleep(long millis) 方法。<br>
2.获得 synchronized 隐式锁的线程，调用带超时参数的 Object.wait(long timeout) 方法。<br>
3.调用带超时参数的 Thread.join(long millis) 方法。<br>
4.调用带超时参数的 LockSupport.parkNanos(Object blocker, long deadline) 方法。<br>
5.调用带超时参数的 LockSupport.parkUntil(long deadline) 方法。</p>
<p><strong>TERMINATED</strong>：在线程运行完、遇到异常、调用interrupt()或stop()方法时线程会转换为TERMINATED态，即终止态。<br>
不过stop()方法已弃用，因为stop方法太过暴力，它采用的方法是直接杀死线程；设想一个线程持有ReentrantLock锁时，若使用stop方法直接将其杀死，那么该线程就无法使用unlock()方法释放锁，那么还在等待队列中的其他线程就再没机会获得该锁了。<br>
interrupt方法则是通过通知线程来引导它终止，也就是说线程有机会执行后续的一些操作。interrupt方法会引导线程触发异常或者让它主动检测自己来终止。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM Class文件加载过程]]></title>
        <id>https://Tempest-101.github.io/post/jvm-lei-de-jia-zai/</id>
        <link href="https://Tempest-101.github.io/post/jvm-lei-de-jia-zai/">
        </link>
        <updated>2023-03-31T11:32:39.000Z</updated>
        <content type="html"><![CDATA[<p>在前不久有人提出了一个问题：.class文件加载到JVM中具体是怎样的一个过程？相信大家都很清楚加载、验证、准备、解析、初始化这几个步骤，但同学疑惑的是最初的那个加载过程，即JVM将.class文件读入。</p>
<h3 id="加载过程">加载过程</h3>
<p>.class文件是二进制字节码文件，它记录了类的结构与数据以及相关信息。JVM会根据它自有的规则解析.class文件，根据.class文件生成instanceKlass对象存放在方法区。instanceKlass存储的是.class文件对应类的元信息，可以理解为描述这个类的信息。JVM底层是由C++实现的，Klass是java类在C++中的表现形式。</p>
<p>同时JVM还会生成一个instanceKlass的镜像对象instanceMirrorKlass存放在堆中，这个镜像对象其实就是用来表示java.lang.Class、是我们通过反射机制获取到的Class对象。也就是说，InstanceMirrorKlass是暴露给外部程序的，而InstanceKlass则是JVM内部专用的。</p>
<h3 id="注意点">注意点</h3>
<p>在方法区那块有人会疑惑方法区与永久代、元空间的关系。需要注意的是，方法区是JVM设计的一个标准，相当于程序中的接口；而永久代也好、元空间也好，都只是方法区的一种实现。</p>
<p>方法区之于永久代、元空间就相当于接口之于实现类。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JVM内存区域划分]]></title>
        <id>https://Tempest-101.github.io/post/jvm-dui-nei-cun-la-ji-hui-shou-ce-lue/</id>
        <link href="https://Tempest-101.github.io/post/jvm-dui-nei-cun-la-ji-hui-shou-ce-lue/">
        </link>
        <updated>2023-03-15T11:29:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="为什么jvm需要内存区域划分">为什么JVM需要内存区域划分？</h3>
<p>众所周知Java程序是有很多不同类型的数据的：类、对象实例、局部变量等。不同的内存空间用来放不同的数据，然后配合我们写的代码流程，才能让我们的系统运行起来。</p>
<p>就好比收纳物品，衣物放在一个地方，电器放在一个地方，药品放在一个地方，这样需要获取一个物品时才能知道应该去哪寻找，而不是堆在一起一个个找过去。</p>
<p>总结：JVM中必须划分出来不同的内存区域，是为了我们写好的代码在运行过程中根据需要来使用。</p>
<p>那么JVM中都有哪些内存区域呢。</p>
<h3 id="方法区">方法区</h3>
<p>方法区主要用来存放从“.class”文件中加载的类，还有一些类似常量池的东西。</p>
<p>JDK1.6及以前，常量池在方法区，这时的方法区也叫做永久代。</p>
<p>JDK1.7的时候，方法区合并到了堆内存中，这时的常量池也可以说是在堆内存中。</p>
<p>JDK1.8及以后，方法区又从堆内存中剥离出来了，但实现方式与之前的永久代不同，这时的方法区被叫做元空间，常量池就存储在元空间。而字符串常量池还在堆中。</p>
<h3 id="程序计数器">程序计数器</h3>
<p>.java文件会被编译为.class文件，.class文件里存储的是编译后的字节码文件，实际上就是一条条指令，JVM用自己的字节码执行引擎对.class文件内的指令一条条的执行。程序计数器的作用就是记录当前执行的字节码指令的位置。多线程编程下，每个线程都有一个对应的程序计数器。</p>
<h3 id="栈">栈</h3>
<p>JVM栈存储的是方法的局部变量。每调用一个方法，就会在JVM栈中压入一个对应的栈帧，用于存储该方法内部的局部变量与该方法的相关信息。该方法执行完毕后就出栈。</p>
<p>每个线程都有自己的JVM栈。</p>
<h3 id="堆">堆</h3>
<p>堆中存放的是Java对象实例。方法的局部变量如果有对象的话，在栈帧中存放的不是对象本身，而是它的一个引用类型。这个引用类型指向堆中存放的那个对象实例。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[调度算法]]></title>
        <id>https://Tempest-101.github.io/post/diao-du-suan-fa/</id>
        <link href="https://Tempest-101.github.io/post/diao-du-suan-fa/">
        </link>
        <updated>2023-03-11T04:24:42.000Z</updated>
        <content type="html"><![CDATA[<p>操作系统有三大调度机制，分别为进程调度、页面置换、磁盘调度。</p>
<h2 id="进程调度算法">进程调度算法</h2>
<p>进程是由CPU调度的，CPU会根据一些规则将CPU资源分配给某进程，这个规则就是进程调度算法。<br>
进程调度分为抢占式与非抢占式。在抢占式调度中，正在运行的进程可以被中断替换另一进程，非抢占式则不能。</p>
<p>下面将介绍几种常用的进程调度算法</p>
<h3 id="先来先服务算法fcfs">先来先服务算法(FCFS)</h3>
<p>顾名思义，FCFS每次会从就绪队列中选择最早进入队列的进程运行，在该进程退出或被阻塞后才会继续从队列中选择第一个进程运行。</p>
<p>可以理解为最传统的排队。以银行办理业务为例，每个客户都是一个进程，需要处理一些业务，服务窗口就是CPU资源。客户需要到服务窗口才能处理业务，如果一次有很多客户的话就需要排队，这个队列就是就绪队列。这里排队的顺序自然是按时间顺序来的，服务窗口按队列为先排队的客户服务，这就是FCFS。</p>
<p>FCFS的缺陷是，如果队列首部有一个很长的作业，那么长作业后面那些短作业就需要等很长时间了。</p>
<h3 id="短作业优先算法sjf">短作业优先算法(SJF)</h3>
<p>SJF会从就绪队列中选取运行时间最短的进程来运行。</p>
<p>依旧是银行的例子，这里排队的顺序就不是按先来后到了，而是处理业务所需时间最短的人排在前面，而业务比较复杂，需要花大量时间解决的客户则排在后面。</p>
<p>SJF的缺陷是，对于一个长作业，如果一直有短作业加入就绪队列，有可能长作业很长时间不会运行。</p>
<h3 id="高响应比优先算法hrrn">高响应比优先算法(HRRN)</h3>
<p>FCFS与SJF都无法权衡长作业与短作业，HRRN解决了该权衡问题。</p>
<p>HRRN在调度时会为就绪队列的进程计算响应比优先级，将响应比优先级最高的进程投入运行。</p>
<p>响应比优先级=(进程已等待时间+所需运行时间)/所需运行时间</p>
<h3 id="时间片轮转算法rr">时间片轮转算法(RR)</h3>
<p>RR是使用的最广泛的调度算法。每个进程被分配一个时间段，称为时间片（Quantum），即允许该进程在该时间段中运行。</p>
<p>当运行中进程的时间片用完后，该进程被阻塞，将资源给下一个时间片的进程。<br>
如果运行中进程的时间片未用完，但该进程已结束或被阻塞，则立刻让出资源。</p>
<p>使用RR需要关注时间片的长度，如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；如果设得太长又可能引起对短作业进程的响应时间变长。</p>
<h3 id="最高优先级算法hpf">最高优先级算法(HPF)</h3>
<p>使用HPF时，每个进程都有一个优先级，在进程调度时，会选取优先级最高的那个进程运行。</p>
<p>优先级可以是静态的，即一开始为进程分配，之后除非人为改变，否则就不变了。也可以是动态的，比如随着进程等待时间的增加，优先级也跟着增加。</p>
<p>HPF也可以是抢占式或非抢占式的。这取决于是否允许中断当前运行的进程。</p>
<h2 id="页面置换算法">页面置换算法</h2>
<p>在了解内存页面置换算法前，我们得先谈一下缺页中断。</p>
<p>当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。那它与一般中断的主要区别在于：</p>
<p>缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。<br>
缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回回到该指令的「下一个指令」执行。</p>
<p>当出现缺页中断，需要调入新页面，但此时内存已满，就需要选择一个物理页面进行置换。页面置换算法的目标就是减少页面置换的次数。</p>
<h3 id="最佳页面置换算法">最佳页面置换算法</h3>
<p>最佳页面置换算法会选择当前内存中未来最长时间不被访问的页面进行置换。这是一种理想算法，因为我们并不能预知未来。</p>
<h3 id="先进先出置换算法">先进先出置换算法</h3>
<p>先进先出算法会选择内存中驻留时间最长的页面进行置换。注意，访问同一个页面不能刷新它的驻留时间。</p>
<h3 id="最近最久为使用置换算法">最近最久为使用置换算法</h3>
<p>该算法选择内存中最长时间没有被访问的页面进行置换。</p>
<p>虽然该算法性能不错，但是需要在内存中维护一个所有页面的链表，代价很高，所以实际应用中使用较少。</p>
<h3 id="时钟页面置换算法">时钟页面置换算法</h3>
<p>该算法维护一个循环队列，一个指向队列节点的指针。队列内容是当前内存中的页面，队列首尾相连。在每个节点设置一个访问位，访问位在页面置换进内存时或该页面被访问时置1。</p>
<p>发生缺页时，检查指针指向的节点访问位是否为0，是的话置换该页，并将指针指向后一个节点。如果不是0的话，则将该节点访问位置0，向后遍历重复操作，直到遍历到访问位为0的节点。</p>
<h2 id="磁盘调度算法">磁盘调度算法</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从输入网址后都发生了些啥？]]></title>
        <id>https://Tempest-101.github.io/post/cong-shu-ru-wang-zhi-hou-du-fa-sheng-liao-xie-sha/</id>
        <link href="https://Tempest-101.github.io/post/cong-shu-ru-wang-zhi-hou-du-fa-sheng-liao-xie-sha/">
        </link>
        <updated>2023-03-10T02:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="解析url">解析URL</h3>
<p>在键入网址后，浏览器会解析URL，根据URL生成请求信息。</p>
<p>例如https://www.google.com/search，浏览器会解析出用的是https协议，服务器域名是www.google.com，访问的是服务器下search映射的资源。如果没有资源路径的话，则代表访问根目录下实现设置的默认文件，如/index.html。</p>
<p>对URL解析后，浏览器就知道需要访问的服务器域名与资源路径，就可以根据这些信息生成请求了。</p>
<h3 id="dns">DNS</h3>
<p>现在知道了域名和访问路径，但是不知道服务器IP地址在哪，这就相当于寄快递只有包裹和收件人姓名，但是不知道收件地址。这里就需要DNS(域名解析系统)的帮助了。</p>
<p>DNS的作用是实现域名到IP地址的映射，简单来说就是给DNS一个域名，然后DNS会返回这个域名对应的IP地址。那么DNS是怎么运作的呢？先了解一下域名吧。</p>
<h4 id="域名">域名</h4>
<p>域名用句点分隔，是不同层次的界限。越靠右的层级越高。可以把域名看作顺序相反的城市地址，即XX区.XX市.XX省。事实上，域名最后还有一个句点，如www.google.com.，这个最后的句点代表着根域名。很容易就发现域名的层级关系是树状结构的，根域指向各个顶级域(com,cn,edu等)，顶级域名再指向低一级的域(google,baidu等)，以此类推。所以通过任意一台DNS服务器，都可以通过它找到根服务器，然后顺藤摸瓜找到下层的任意一台DNS服务器。</p>
<h4 id="域名解析流程">域名解析流程</h4>
<ul>
<li>
<p>在获取域名后，操作系统会先检索浏览器缓存与本地hosts文件是否有这个网址记录，有的话就取用，没有的话再查找本机DNS解析器缓存，若仍没有数据则向TCP/IP设置中的DNS服务器发送请求。</p>
</li>
<li>
<p>本地DNS服务器一般由运营商提供。本地DNS服务器收到请求后，检索自己的缓存，检索本地配置区域资源，若都没有匹配记录的话，则本地DNS服务器向根DNS服务器发送请求。之后为迭代请求。</p>
</li>
<li>
<p>根服务器若有缓存数据，则返回缓存数据，否则返回下一级服务器地址，让本地DNS服务器访问下一级服务器，以此类推。</p>
</li>
<li>
<p>若匹配到数据，则将域名对应的IP地址发送回本地DNS服务器，本地DNS服务器再返回给浏览器。<br>
到此，浏览器就获得了服务器地址。</p>
</li>
</ul>
<h3 id="组装报文">组装报文</h3>
<p>如果直接将数据发到服务器的话，服务器无法得知这个数据的信息，比如长度为多少？用的协议是什么？等等。那么服务器就无法顺利解析这条数据。为了能让服务器顺利获取这个数据包的信息，需要给数据加上几个头部，用来标识这条数据包的相关附加信息。这样服务器收到后就可以根据这些头部拆分识别这条数据了。</p>
<p>这里需要了解协议栈。协议栈可以看作一个自上而下的工厂，应用程序(浏览器，服务器)收集到IP与数据后就将剩下的工作委托给协议栈，协议栈内部根据不同功能各司其职，为从上层获取到的数据包切分数据，添加包头，组装报文，然后向下传输。<br>
这里协议栈还需要提一嘴ARP与ICMP，ARP的作用是实现IP地址到MAC地址的映射，即给予IP地址，返回MAC地址。ICMP的作用是告知网络包传送过程中产生的错误以及各种控制信息。</p>
<p>在协议栈处理好报文后，就会交由网卡，将数字信号转化为电信号，这样才能传输。网卡由网卡驱动控制，网卡驱动获取网络包之后，会将其复制到网卡内的缓存区中，接着会在其开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列。</p>
<p>发送端的运作就到此为止了，接下来就是数据包经过交换机、路由器到达目标端。</p>
<h3 id="服务器接收">服务器接收</h3>
<p>服务器接收到这个包后，服务器网卡会先将其转回数字信息，然后再由服务器一系列程序进行包的拆解、验证。其实就类似于拆快递，这一过程要验证快递上填写的身份信息，然后将快递层层拆开，才能得到里面的东西。</p>
<h3 id="返回响应">返回响应</h3>
<p>服务器得到数据包内部数据后，会将该数据交给指定的应用程序，应用程序根据所得包进行一系列处理后，生成响应信息，返回给浏览器。</p>
<h3 id="三次握手-四次挥手">三次握手、四次挥手</h3>
<p>TCP是面向连接的传输协议，使用TCP的话，在传输数据前要先进行三次握手建立可靠连接，再结束数据传输后也要进行四次挥手断开连接，具体会在另一篇中讲。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么MAC地址与IP地址缺一不可]]></title>
        <id>https://Tempest-101.github.io/post/wei-shi-me-mac-di-zhi-yu-ip-di-zhi-que-yi-bu-ke/</id>
        <link href="https://Tempest-101.github.io/post/wei-shi-me-mac-di-zhi-yu-ip-di-zhi-que-yi-bu-ke/">
        </link>
        <updated>2023-03-08T07:59:40.000Z</updated>
        <content type="html"><![CDATA[<p>简单的来讲，MAC地址标识的是主机的身份，IP地址标识的是主机的地址。可以理解为，在网购时，MAC地址是用户的身份，是用户的唯一标识。而IP地址则是用户的收件地址。<br>
互联网中主机很多很多，如果只通过MAC地址传输数据的话，代价太大，IP地址就是为了让数据包更好寻址。IP地址的分配是根据网络拓扑结构来的，不能将高效的路由选择方案建立在设备制造商的基础之上。<br>
如果一个以太网卡坏了，可以被更换，而无须取得一个新的IP地址。如果一个IP主机从一个网络移到另一个网络，可以给它一个新的IP地址，而无须换一个新的网卡。</p>
<p>这篇文章我觉得写的很好，很清楚的描述了MAC地址与IP地址的作用，小菜菜写不过他所以搬这了：<br>
<a href="https://mp.weixin.qq.com/s/jiPMUk6zUdOY6eKxAjNDbQ">如果让你来设计网络</a></p>
]]></content>
    </entry>
</feed>